//enable
//attrib
int enablepscale = chi("enable_pscale");
int enablestartFrame = chi("enable_startframe");
int enablerot = chi("enable_rot");
  
//cache
int enablecachebundle = chi("enable_cache");

//override
//attribs
    
if(enablepscale == 1)
{
    @pscale = ch("override_pscale");
}

if(ch("../sequencial_by_ptnum") == 0)
{
    if(enablestartFrame == 1)
    {
        i@startFrame = chi("override_startFrame");
        i@offsetedFrame = int(@Frame - (i@startFrame - (ch("fstart"))));
    }
}
else
{
    float method = ch("../method");

    if(method == 0)
    {
        i@startFrame = chi("fstart") + i@id * chi("nth_frame");
    }
    else if(method == 1)
    {
        
        int list[], i;
        int minID = detail(0, "minID");
        int maxID = detail(0, "maxID");
        
        for(i = minID; i<= maxID; i++)
        {
            int rand_range = int(fit01(rand(i * (ch("seed") + 1)), ch("min_rand_range"), ch("max_rand_range")));
            append(list, rand_range + list[i - 1]);
        }
        
        int range = list[i@id];
        i@startFrame = chi("fstart") + range;
    }
    
    i@offsetedFrame = int(@Frame - (i@startFrame - (ch("fstart"))));
    
    int enablefilepath = detail(0, "enablefilepath");
    
    if(enablefilepath == 1)
    {
        int globalPad = i@padding;
        string inputcache = s@inputcache;
        string inputproxy = s@inputproxy;
        
        string curFrame = s@curframe;
        string newFrame = sprintf("%0" + itoa(globalPad) + "d", i@offsetedFrame);
        
        s@cache = re_replace(curFrame, newFrame, inputcache);
        s@proxy = re_replace(curFrame, newFrame, inputproxy);
    }
}

if(enablerot == 1)
{
    v@rot.y = ch("override_rotation");
}

if(enablecachebundle == 1)
{
    s@cache = chs("override_cache");
    s@proxy = chs("override_proxy");
}

@frameoffset = -(i@startFrame - (ch("fstart")));